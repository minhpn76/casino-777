{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { useDeprecated } from \"./utils/utils\";\nimport { observable, runInAction } from \"mobx\";\nimport { useState } from \"react\";\nexport function useAsObservableSource(current) {\n  if (\"production\" !== process.env.NODE_ENV) useDeprecated(\"[mobx-react-lite] 'useAsObservableSource' is deprecated, please store the values directly in an observable, for example by using 'useLocalObservable', and sync future updates using 'useEffect' when needed. See the README for examples.\");\n\n  var _a = __read(useState(function () {\n    return observable(current, {}, {\n      deep: false\n    });\n  }), 1),\n      res = _a[0];\n\n  runInAction(function () {\n    Object.assign(res, current);\n  });\n  return res;\n}","map":{"version":3,"sources":["../src/useAsObservableSource.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,aAAT,QAA8B,eAA9B;AACA,SAAS,UAAT,EAAqB,WAArB,QAAwC,MAAxC;AACA,SAAS,QAAT,QAAyB,OAAzB;AAEA,OAAM,SAAU,qBAAV,CAAwD,OAAxD,EAAwE;EAC1E,IAAI,iBAAiB,OAAO,CAAC,GAAR,CAAY,QAAjC,EACI,aAAa,CACT,4OADS,CAAb;;EAGE,IAAA,EAAA,GAAA,MAAA,CAAQ,QAAQ,CAAC,YAAA;IAAM,OAAA,UAAU,CAAC,OAAD,EAAU,EAAV,EAAc;MAAE,IAAI,EAA9B;IAAwB,CAAd,CAAV;EAAwC,CAA/C,CAAhB,EAAgE,CAAhE,CAAA;EAAA,IAAC,GAAG,GAAA,EAAA,CAAA,CAAA,CAAJ;;EACN,WAAW,CAAC,YAAA;IACR,MAAM,CAAC,MAAP,CAAc,GAAd,EAAmB,OAAnB;EACH,CAFU,CAAX;EAGA,OAAO,GAAP;AACH","sourceRoot":"","sourcesContent":["var __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport { useDeprecated } from \"./utils/utils\";\nimport { observable, runInAction } from \"mobx\";\nimport { useState } from \"react\";\nexport function useAsObservableSource(current) {\n    if (\"production\" !== process.env.NODE_ENV)\n        useDeprecated(\"[mobx-react-lite] 'useAsObservableSource' is deprecated, please store the values directly in an observable, for example by using 'useLocalObservable', and sync future updates using 'useEffect' when needed. See the README for examples.\");\n    var _a = __read(useState(function () { return observable(current, {}, { deep: false }); }), 1), res = _a[0];\n    runInAction(function () {\n        Object.assign(res, current);\n    });\n    return res;\n}\n//# sourceMappingURL=useAsObservableSource.js.map"]},"metadata":{},"sourceType":"module"}