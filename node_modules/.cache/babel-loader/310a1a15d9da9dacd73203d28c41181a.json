{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { Reaction } from \"mobx\";\nimport React from \"react\";\nimport { printDebugValue } from \"./utils/printDebugValue\";\nimport { addReactionToTrack, recordReactionAsCommitted } from \"./utils/reactionCleanupTracking\";\nimport { isUsingStaticRendering } from \"./staticRendering\";\n\nfunction observerComponentNameFor(baseComponentName) {\n  return \"observer\".concat(baseComponentName);\n}\n/**\n * We use class to make it easier to detect in heap snapshots by name\n */\n\n\nvar ObjectToBeRetainedByReact =\n/** @class */\nfunction () {\n  function ObjectToBeRetainedByReact() {}\n\n  return ObjectToBeRetainedByReact;\n}();\n\nfunction objectToBeRetainedByReactFactory() {\n  return new ObjectToBeRetainedByReact();\n}\n\nexport function useObserver(fn, baseComponentName) {\n  if (baseComponentName === void 0) {\n    baseComponentName = \"observed\";\n  }\n\n  if (isUsingStaticRendering()) {\n    return fn();\n  }\n\n  var _a = __read(React.useState(objectToBeRetainedByReactFactory), 1),\n      objectRetainedByReact = _a[0]; // Force update, see #2982\n\n\n  var _b = __read(React.useState(), 2),\n      setState = _b[1];\n\n  var forceUpdate = function forceUpdate() {\n    return setState([]);\n  }; // StrictMode/ConcurrentMode/Suspense may mean that our component is\n  // rendered and abandoned multiple times, so we need to track leaked\n  // Reactions.\n\n\n  var reactionTrackingRef = React.useRef(null);\n\n  if (!reactionTrackingRef.current) {\n    // First render for this component (or first time since a previous\n    // reaction from an abandoned render was disposed).\n    var newReaction = new Reaction(observerComponentNameFor(baseComponentName), function () {\n      // Observable has changed, meaning we want to re-render\n      // BUT if we're a component that hasn't yet got to the useEffect()\n      // stage, we might be a component that _started_ to render, but\n      // got dropped, and we don't want to make state changes then.\n      // (It triggers warnings in StrictMode, for a start.)\n      if (trackingData_1.mounted) {\n        // We have reached useEffect(), so we're mounted, and can trigger an update\n        forceUpdate();\n      } else {\n        // We haven't yet reached useEffect(), so we'll need to trigger a re-render\n        // when (and if) useEffect() arrives.\n        trackingData_1.changedBeforeMount = true;\n      }\n    });\n    var trackingData_1 = addReactionToTrack(reactionTrackingRef, newReaction, objectRetainedByReact);\n  }\n\n  var reaction = reactionTrackingRef.current.reaction;\n  React.useDebugValue(reaction, printDebugValue);\n  React.useEffect(function () {\n    // Called on first mount only\n    recordReactionAsCommitted(reactionTrackingRef);\n\n    if (reactionTrackingRef.current) {\n      // Great. We've already got our reaction from our render;\n      // all we need to do is to record that it's now mounted,\n      // to allow future observable changes to trigger re-renders\n      reactionTrackingRef.current.mounted = true; // Got a change before first mount, force an update\n\n      if (reactionTrackingRef.current.changedBeforeMount) {\n        reactionTrackingRef.current.changedBeforeMount = false;\n        forceUpdate();\n      }\n    } else {\n      // The reaction we set up in our render has been disposed.\n      // This can be due to bad timings of renderings, e.g. our\n      // component was paused for a _very_ long time, and our\n      // reaction got cleaned up\n      // Re-create the reaction\n      reactionTrackingRef.current = {\n        reaction: new Reaction(observerComponentNameFor(baseComponentName), function () {\n          // We've definitely already been mounted at this point\n          forceUpdate();\n        }),\n        mounted: true,\n        changedBeforeMount: false,\n        cleanAt: Infinity\n      };\n      forceUpdate();\n    }\n\n    return function () {\n      reactionTrackingRef.current.reaction.dispose();\n      reactionTrackingRef.current = null;\n    };\n  }, []); // render the original component, but have the\n  // reaction track the observables, so that rendering\n  // can be invalidated (see above) once a dependency changes\n\n  var rendering;\n  var exception;\n  reaction.track(function () {\n    try {\n      rendering = fn();\n    } catch (e) {\n      exception = e;\n    }\n  });\n\n  if (exception) {\n    throw exception; // re-throw any exceptions caught during rendering\n  }\n\n  return rendering;\n}","map":{"version":3,"sources":["../src/useObserver.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport { Reaction } from \"mobx\";\nimport React from \"react\";\nimport { printDebugValue } from \"./utils/printDebugValue\";\nimport { addReactionToTrack, recordReactionAsCommitted } from \"./utils/reactionCleanupTracking\";\nimport { isUsingStaticRendering } from \"./staticRendering\";\nfunction observerComponentNameFor(baseComponentName) {\n    return \"observer\".concat(baseComponentName);\n}\n/**\n * We use class to make it easier to detect in heap snapshots by name\n */\nvar ObjectToBeRetainedByReact = /** @class */ (function () {\n    function ObjectToBeRetainedByReact() {\n    }\n    return ObjectToBeRetainedByReact;\n}());\nfunction objectToBeRetainedByReactFactory() {\n    return new ObjectToBeRetainedByReact();\n}\nexport function useObserver(fn, baseComponentName) {\n    if (baseComponentName === void 0) { baseComponentName = \"observed\"; }\n    if (isUsingStaticRendering()) {\n        return fn();\n    }\n    var _a = __read(React.useState(objectToBeRetainedByReactFactory), 1), objectRetainedByReact = _a[0];\n    // Force update, see #2982\n    var _b = __read(React.useState(), 2), setState = _b[1];\n    var forceUpdate = function () { return setState([]); };\n    // StrictMode/ConcurrentMode/Suspense may mean that our component is\n    // rendered and abandoned multiple times, so we need to track leaked\n    // Reactions.\n    var reactionTrackingRef = React.useRef(null);\n    if (!reactionTrackingRef.current) {\n        // First render for this component (or first time since a previous\n        // reaction from an abandoned render was disposed).\n        var newReaction = new Reaction(observerComponentNameFor(baseComponentName), function () {\n            // Observable has changed, meaning we want to re-render\n            // BUT if we're a component that hasn't yet got to the useEffect()\n            // stage, we might be a component that _started_ to render, but\n            // got dropped, and we don't want to make state changes then.\n            // (It triggers warnings in StrictMode, for a start.)\n            if (trackingData_1.mounted) {\n                // We have reached useEffect(), so we're mounted, and can trigger an update\n                forceUpdate();\n            }\n            else {\n                // We haven't yet reached useEffect(), so we'll need to trigger a re-render\n                // when (and if) useEffect() arrives.\n                trackingData_1.changedBeforeMount = true;\n            }\n        });\n        var trackingData_1 = addReactionToTrack(reactionTrackingRef, newReaction, objectRetainedByReact);\n    }\n    var reaction = reactionTrackingRef.current.reaction;\n    React.useDebugValue(reaction, printDebugValue);\n    React.useEffect(function () {\n        // Called on first mount only\n        recordReactionAsCommitted(reactionTrackingRef);\n        if (reactionTrackingRef.current) {\n            // Great. We've already got our reaction from our render;\n            // all we need to do is to record that it's now mounted,\n            // to allow future observable changes to trigger re-renders\n            reactionTrackingRef.current.mounted = true;\n            // Got a change before first mount, force an update\n            if (reactionTrackingRef.current.changedBeforeMount) {\n                reactionTrackingRef.current.changedBeforeMount = false;\n                forceUpdate();\n            }\n        }\n        else {\n            // The reaction we set up in our render has been disposed.\n            // This can be due to bad timings of renderings, e.g. our\n            // component was paused for a _very_ long time, and our\n            // reaction got cleaned up\n            // Re-create the reaction\n            reactionTrackingRef.current = {\n                reaction: new Reaction(observerComponentNameFor(baseComponentName), function () {\n                    // We've definitely already been mounted at this point\n                    forceUpdate();\n                }),\n                mounted: true,\n                changedBeforeMount: false,\n                cleanAt: Infinity\n            };\n            forceUpdate();\n        }\n        return function () {\n            reactionTrackingRef.current.reaction.dispose();\n            reactionTrackingRef.current = null;\n        };\n    }, []);\n    // render the original component, but have the\n    // reaction track the observables, so that rendering\n    // can be invalidated (see above) once a dependency changes\n    var rendering;\n    var exception;\n    reaction.track(function () {\n        try {\n            rendering = fn();\n        }\n        catch (e) {\n            exception = e;\n        }\n    });\n    if (exception) {\n        throw exception; // re-throw any exceptions caught during rendering\n    }\n    return rendering;\n}\n//# sourceMappingURL=useObserver.js.map"]},"metadata":{},"sourceType":"module"}