import { IReactionDisposer } from 'mobx';
import { StorageAdapter } from './StorageAdapter';
import { PersistenceCreatorReturnFunction, PersistenceStore } from './types';
declare class StorageConfigurationStatic<T> {
    private adapterMap;
    private disposersMap;
    private isSynchronizedMap;
    private startPersistMap;
    setAdapter: (storageName: string, adapter: StorageAdapter) => void;
    setDisposers: (target: PersistenceStore<T>, disposers: IReactionDisposer[]) => void;
    setStartPersist: (storageName: string, startPersist: () => PersistenceCreatorReturnFunction) => void;
    setIsSynchronized: (target: PersistenceStore<T>, isSynchronized: boolean) => void;
    getAdapter: (target: PersistenceStore<T>) => StorageAdapter | undefined;
    getDisposers: (target: PersistenceStore<T>) => IReactionDisposer[];
    getIsSynchronized: (target: PersistenceStore<T>) => boolean;
    getStartPersist: (target: PersistenceStore<T>) => (() => PersistenceCreatorReturnFunction) | undefined;
    clearDisposers: (target: PersistenceStore<T>) => boolean;
}
export declare const StorageConfiguration: StorageConfigurationStatic<unknown>;
export {};
